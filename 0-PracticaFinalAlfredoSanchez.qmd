---
format: html
editor: visual
---

```{r}
{r}
install.packages("dplyr")
library(ggplot2)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
```

Mostrar las primeras 6 filas del dataframe

```{r}
head(airbnb)
```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
```

```{r}
names(airbnb)<-newnames
```

Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
airbnb$MetrosCuadrados<-airbnb$PiesCuadrados*0.092903
```

Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dentro de 28002

```{r}
airbnb[which(airbnb$CodigoPostal=="28002\n28002"),"CodigoPostal"]<-"28002"
airbnb[which(airbnb$CodigoPostal=="28004\n28004"),"CodigoPostal"]<-"28004"
airbnb[which(airbnb$CodigoPostal=="28051\n28051"),"CodigoPostal"]<-"28051"
```

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 junto con 2815 debería ser 28015dro

```{r}
airbnb[which(airbnb$CodigoPostal=="2804"),"CodigoPostal"]<-"28004"
airbnb[which(airbnb$CodigoPostal=="2804"),"CodigoPostal"]<-"28004"
airbnb[which(airbnb$CodigoPostal=="Madrid 28004"),"CodigoPostal"]<-"28004"
airbnb[which(airbnb$CodigoPostal=="2015"),"CodigoPostal"]<-"28015"
airbnb[which(airbnb$CodigoPostal=="2805"),"CodigoPostal"]<-"28005"
airbnb[which(airbnb$CodigoPostal=="2815"),"CodigoPostal"]<-"28015"
airbnb[which(airbnb$CodigoPostal=="280013"),"CodigoPostal"]<-"28013"
airbnb[which(airbnb$CodigoPostal==""),"CodigoPostal"]<-NA
airbnb[which(airbnb$CodigoPostal %in% c('-','28','20013','20126','25008','27004','27013')),"CodigoPostal"]<-NA
airbnb$CodigoPostal<-droplevels(airbnb$CodigoPostal)
```

Limpia los datos de la columna Codigo Postal

Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}
codigos <- airbnb$CodigoPostal[which(!is.na(airbnb$CodigoPostal))]
unique(codigos)
```

¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}
mas_frecuentes <- names(sort(table(codigos),decreasing=TRUE))[1:5]
paste0("Los códigos postales más frecuentes son: ",paste0(mas_frecuentes, collapse = ", "))
menos_frecuentes <- names(sort(table(codigos)))[1:5]
paste0("Los códigos postales menos frecuentes son: ",paste0(menos_frecuentes, collapse = ", "))
```

¿Cuales son los barrios que hay en el código postal 28012?

```{r}
barrios_28012 <- na.omit(airbnb$Barrio[airbnb$CodigoPostal == "28012"])
barrios_28012 <- droplevels(barrios_28012)
paste0("Los barrios que hay en el código postal 28012 son: ",paste0(unique(barrios_28012),collapse=", "))
```

¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

entradas \<- data.frame(barrio = names(tabla), frecuencia = as.numeric(tabla))

```{r}
tabla <- table(barrios_28012)
entradas <- data.frame(barrio = names(tabla), frecuencia = as.numeric(tabla))
cat(paste0("\t","El barrio ",entradas$barrio," tiene ",entradas$frecuencia," entradas","\n"))
```

¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}
paste0("En el dataset airbnb hay ",length(unique(airbnb$Barrio))," barrios")
paste0("Los barrios que hay en el dataset son: ",paste0(unique(airbnb$Barrio),collapse=", "))
```

¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}
mas_frecuentes <- names(sort(table(airbnb$Barrio),decreasing=TRUE))[1:5]
paste0("Los cinco barrios con mayor número de entradas son: ",paste0(mas_frecuentes, collapse = ", "))
```

¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

```{r}
paste0("En el dataset hay ",length(unique(airbnb$TipoAlquiler))," tipos de alquiler")
paste0("Los tipos de alquiler que hay en el dataset son: ",paste0(unique(airbnb$TipoAlquiler),collapse=", "))
tipos_alquiler <- table(airbnb$TipoAlquiler)
tipos_alquiler_frec <- data.frame(TipoAlquiler = names(tipos_alquiler), frecuencia = as.numeric(tipos_alquiler))
cat(paste0("\t","El tipo de alquiler ",tipos_alquiler_frec$TipoAlquiler," tiene ",tipos_alquiler_frec$frecuencia," entradas","\n"))

```

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}
library("ggplot2")
```

```{r}
ggplot(data=airbnb, aes(x=TipoAlquiler, y=Precio, color=TipoAlquiler))+geom_boxplot(outlier.shape = NA)+coord_cartesian(ylim=c(0,200))+scale_color_discrete(name="Tipo de alquiler")
```

Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

```{r}
paste0("El precio medio del tipo Entire home/apt es ",mean(na.omit(airbnb$Precio[which(airbnb$TipoAlquiler=="Entire home/apt")])), " euros")
paste0("El precio medio del tipo Private room es ",mean(na.omit(airbnb$Precio[which(airbnb$TipoAlquiler=="Private room")])), " euros")
paste0("El precio medio del tipo Shared room es ",mean(na.omit(airbnb$Precio[which(airbnb$TipoAlquiler=="Shared room")])), " euros")
```

Para ver si la diferencia es estadísticamente significativa primero miramos si cada una de las medias sigue una distribución gaussiana (normal)

```{r}
library(dplyr)
precios_entire_home <- airbnb$Precio[which(airbnb$TipoAlquiler=="Entire home/apt")]
precios_private_room <- airbnb$Precio[which(airbnb$TipoAlquiler=="Private room")]
precios_shared_room <- airbnb$Precio[which(airbnb$TipoAlquiler=="Shared room")]
paste("El p-valor del tipo entire_home es ",shapiro.test(precios_entire_home[1:5000])$p.value)
paste("El p-valor del tipo private room es ",shapiro.test(precios_private_room[1:5000])$p.value)
paste("El p-valor del tipo shared room es ",shapiro.test(precios_shared_room[1:5000])$p.value)
```

Ninguno de los tres precios sigue una distribución normal, por lo que aplicamos el test Kruskal-Wallis

```{r}
kruskal.test(TipoAlquiler ~ Precio, data = airbnb)
```

**Como el p-valor \< 0,05 decimos que hay diferencias significativas estadísticamente en la media.**

Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
airbnb_entire <- airbnb[which(airbnb$TipoAlquiler=="Entire home/apt"),]
```

¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}
mayor_numero <- names(sort(table(airbnb_entire$Barrio),decreasing=TRUE))[1:5]
paste0("Los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler son: ",paste0(mayor_numero, collapse = ", "))
```

¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)?

```{r}
mayor_precio_medio <- aggregate(airbnb_entire$Precio, list(airbnb_entire$Barrio),mean)
colnames(mayor_precio_medio) <- c("Barrio","Precio Medio")
mayor_precio_medio <- mayor_precio_medio[with(mayor_precio_medio, order(-mayor_precio_medio$`Precio Medio`)),]
paste("Los 5 barrios con mayor precio medio de alquiler son ",paste(mayor_precio_medio$Barrio[1:5], collapse =", "))
```

¿Cual es su precio medio?

```{r}
cincobarrios <- c(mayor_precio_medio$Barrio[1:5])
cincoprecios <- c(mayor_precio_medio$`Precio Medio`[1:5])
paste("Los cinco barrios con mayor precio medio y sus precios medios son: ",paste(cincobarrios,cincoprecios, collapse=", "))
```

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

¿Cuantos apartamentos hay en cada uno de esos barrios?

```{r}
numero_apartamentos <- airbnb_entire$Barrio[which(airbnb_entire$Barrio %in% cincobarrios)]
numero_apartamentos <- droplevels(numero_apartamentos)
table(numero_apartamentos)
```

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
frecuencia_barrio <- table(airbnb_entire$Barrio)
frecuencia_barrio <- data.frame(Barrio = names(frecuencia_barrio), Frecuencia = as.numeric(frecuencia_barrio))
precio_medio <- aggregate(airbnb_entire$Precio, list(airbnb_entire$Barrio),mean)
colnames(precio_medio) <- c("Barrio","Precio Medio")
nuevo_df <- merge(frecuencia_barrio, precio_medio)
```

Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}
nuevo_df<-nuevo_df[order(nuevo_df$`Precio Medio`,decreasing=TRUE),]
nuevo_df<-nuevo_df[which(nuevo_df$Frecuencia>=100),]
paste("Los cinco barrios con mayor precio de alquiler que tienen más de 100 entradas son",paste(nuevo_df$Barrio[1:5],collapse=", "))

```

Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}
library(ggplot2)
ggplot(airbnb_entire[which(airbnb_entire$Barrio %in% c("Goya","Sol","Trafalgar","Justicia","Cortes")),], aes(x=Precio, color=Barrio))+geom_density()
```

Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
paste("La media de metros cuadrados de Goya es ",mean(na.omit(airbnb_entire$PiesCuadrados[which(airbnb_entire$Barrio=="Goya" & airbnb_entire$PiesCuadrados>0)]))*0.092903)
paste("La media de metros cuadrados de Sol es ",mean(na.omit(airbnb_entire$PiesCuadrados[which(airbnb_entire$Barrio=="Sol" & airbnb_entire$PiesCuadrados>0)]))*0.092903)
paste("La media de metros cuadrados de Trafalgar es ",mean(na.omit(airbnb_entire$PiesCuadrados[which(airbnb_entire$Barrio=="Trafalgar" & airbnb_entire$PiesCuadrados>0)]))*0.092903)
paste("La media de metros cuadrados de Justicia es ",mean(na.omit(airbnb_entire$PiesCuadrados[which(airbnb_entire$Barrio=="Justicia" & airbnb_entire$PiesCuadrados>0)]))*0.092903)
paste("La media de metros cuadrados de Cortes es ",mean(na.omit(airbnb_entire$PiesCuadrados[which(airbnb_entire$Barrio=="Cortes" & airbnb_entire$PiesCuadrados>0)]))*0.092903)
```

Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}
library(ggplot2)
ggplot(airbnb_entire[which(airbnb_entire$Barrio %in% c("Goya","Sol","Trafalgar","Justicia","Cortes") & airbnb_entire$PiesCuadrados>0),], aes(x=PiesCuadrados, color=Barrio))+geom_density()
```

Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

```{r}
shapiro.test(airbnb_entire$MetrosCuadrados[airbnb_entire$Barrio=="Goya"])
shapiro.test(airbnb_entire$MetrosCuadrados[airbnb_entire$Barrio=="Justicia"])
shapiro.test(airbnb_entire$MetrosCuadrados[airbnb_entire$Barrio=="Sol"])
shapiro.test(airbnb_entire$MetrosCuadrados[airbnb_entire$Barrio=="Trafalgar"])
shapiro.test(airbnb_entire$MetrosCuadrados[airbnb_entire$Barrio=="Recoletos"])
paste("Pese a que el test shapiro indica distribución normal en Goya, el resto no, así que hacemos test kruskal")
kruskal.test(MetrosCuadrados ~ Barrio, data = airbnb_entire)
paste("Como el p-valor es menor a 0,05 no podemos decir que sean estadísticamente iguales")
```

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

```{r}
barrio_sol<-subset(airbnb_entire,Barrio=="Sol")
barrio_sol[which(barrio_sol$MetrosCuadrados==0),"MetrosCuadrados"]<-NA
```

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

```{r}
cor(na.omit(barrio_sol[, c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")]))
```

Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
library(ggplot2)
ggplot(barrio_sol, aes(x=MetrosCuadrados))+geom_histogram()
```

Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

```{r}
barrio_sol[which(barrio_sol$MetrosCuadrados<20),"MetrosCuadrados"]<-NA

```

```{r}
cor(na.omit(barrio_sol[, c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")]))
```

```{r}
model <- glm(data=barrio_sol, formula = Precio~NumDormitorios + MetrosCuadrados + NumBanyos + MaxOcupantes)
summary(model)
```

```{r}
model <- glm(data=barrio_sol, formula = Precio~NumDormitorios + MetrosCuadrados)
summary(model)
```

**El modelo para obtener el precio debería incluir el número de habitaciones y puede incluir el campo de metros cuadrados, aunque su influencia es menor (sin poder decirse que no influye)**

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

```{r}
model <- glm(data=barrio_sol, formula = Precio~NumDormitorios + MetrosCuadrados)
summary(model)
```

**El número de dormitorios es claramente más significativo que los metros cuadrados**

Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

```{r}
modelo_lineal <- lm(Precio ~ MetrosCuadrados, data=barrio_sol)
confint(modelo_lineal)
```

**El precio se incrementa entre 0,681 y 1,301 euros por cada metro cuadrado**

Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

```{r}
modelo_lineal <- lm(Precio ~ NumDormitorios, data=barrio_sol)
confint(modelo_lineal)
```

**El precio se incrementa entre 30,5 y 36,228 euros por cada metro cuadrado**

¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}
datos <- data.frame(table(barrio_sol$NumDormitorios))
colnames(datos) <- c("Numero habitaciones","Frecuencia")
binom.test(datos$Frecuencia[which(datos$`Numero habitaciones`==3)],length(barrio_sol$NumDormitorios))
```

**La probabilidad de encontrar una habitación de 3 dormitorios es de un 7,84% con un intervalo de confianza del 95% de (5,96% y 10,09%)**
